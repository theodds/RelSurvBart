// Generated by rstantools.  Do not edit by hand.

/*
    BART4RS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BART4RS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BART4RS.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_PEHaz_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 62> locations_array__ =
  {" (found before start of program)",
  " (in 'PEHaz', line 12, column 2 to column 17)",
  " (in 'PEHaz', line 13, column 2 to column 36)",
  " (in 'PEHaz', line 14, column 2 to column 29)",
  " (in 'PEHaz', line 15, column 2 to column 29)",
  " (in 'PEHaz', line 18, column 2 to column 14)",
  " (in 'PEHaz', line 19, column 2 to column 16)",
  " (in 'PEHaz', line 20, column 2 to column 37)",
  " (in 'PEHaz', line 22, column 11 to column 12)",
  " (in 'PEHaz', line 22, column 4 to column 23)",
  " (in 'PEHaz', line 23, column 11 to column 12)",
  " (in 'PEHaz', line 23, column 4 to column 22)",
  " (in 'PEHaz', line 24, column 4 to column 19)",
  " (in 'PEHaz', line 26, column 6 to column 22)",
  " (in 'PEHaz', line 27, column 6 to column 21)",
  " (in 'PEHaz', line 29, column 27 to line 30, column 9)",
  " (in 'PEHaz', line 29, column 8 to line 30, column 9)",
  " (in 'PEHaz', line 32, column 10 to column 53)",
  " (in 'PEHaz', line 33, column 10 to column 34)",
  " (in 'PEHaz', line 31, column 48 to line 34, column 9)",
  " (in 'PEHaz', line 31, column 8 to line 34, column 9)",
  " (in 'PEHaz', line 36, column 10 to column 58)",
  " (in 'PEHaz', line 35, column 30 to line 37, column 9)",
  " (in 'PEHaz', line 35, column 8 to line 37, column 9)",
  " (in 'PEHaz', line 28, column 34 to line 38, column 7)",
  " (in 'PEHaz', line 28, column 6 to line 38, column 7)",
  " (in 'PEHaz', line 40, column 8 to column 40)",
  " (in 'PEHaz', line 41, column 8 to column 67)",
  " (in 'PEHaz', line 39, column 34 to line 42, column 7)",
  " (in 'PEHaz', line 39, column 6 to line 42, column 7)",
  " (in 'PEHaz', line 25, column 18 to line 43, column 5)",
  " (in 'PEHaz', line 25, column 4 to line 43, column 5)",
  " (in 'PEHaz', line 44, column 4 to column 15)",
  " (in 'PEHaz', line 46, column 6 to line 47, column 33)",
  " (in 'PEHaz', line 45, column 18 to line 48, column 5)",
  " (in 'PEHaz', line 45, column 4 to line 48, column 5)",
  " (in 'PEHaz', line 21, column 2 to line 49, column 3)",
  " (in 'PEHaz', line 50, column 2 to column 52)",
  " (in 'PEHaz', line 52, column 4 to column 76)",
  " (in 'PEHaz', line 51, column 30 to line 53, column 3)",
  " (in 'PEHaz', line 51, column 2 to line 53, column 3)",
  " (in 'PEHaz', line 56, column 2 to column 19)",
  " (in 'PEHaz', line 57, column 2 to column 45)",
  " (in 'PEHaz', line 58, column 2 to column 28)",
  " (in 'PEHaz', line 2, column 2 to column 17)",
  " (in 'PEHaz', line 3, column 2 to column 17)",
  " (in 'PEHaz', line 4, column 2 to column 25)",
  " (in 'PEHaz', line 5, column 9 to column 10)",
  " (in 'PEHaz', line 5, column 2 to column 20)",
  " (in 'PEHaz', line 6, column 9 to column 10)",
  " (in 'PEHaz', line 6, column 11 to column 12)",
  " (in 'PEHaz', line 6, column 2 to column 16)",
  " (in 'PEHaz', line 7, column 9 to column 10)",
  " (in 'PEHaz', line 7, column 2 to column 14)",
  " (in 'PEHaz', line 8, column 9 to column 10)",
  " (in 'PEHaz', line 8, column 2 to column 18)",
  " (in 'PEHaz', line 9, column 9 to column 18)",
  " (in 'PEHaz', line 9, column 2 to column 25)",
  " (in 'PEHaz', line 12, column 9 to column 10)",
  " (in 'PEHaz', line 13, column 18 to column 27)",
  " (in 'PEHaz', line 19, column 9 to column 10)",
  " (in 'PEHaz', line 20, column 9 to column 22)"};
#include <stan_meta_header.hpp>
class model_PEHaz final : public model_base_crtp<model_PEHaz> {
private:
  int N;
  int P;
  int grid_size;
  Eigen::Matrix<double,-1,1> pop_haz_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,1> delta_data__;
  Eigen::Matrix<double,-1,1> grid_data__;
  int base_cum_haz_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> pop_haz{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> delta{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> grid{nullptr, 0};
public:
  ~model_PEHaz() {}
  model_PEHaz(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_PEHaz_namespace::model_PEHaz";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 44;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 44;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 45;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "grid_size", "int",
        std::vector<size_t>{});
      grid_size = std::numeric_limits<int>::min();
      current_statement__ = 46;
      grid_size = context__.vals_i("grid_size")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "grid_size", grid_size,
        0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("pop_haz", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "pop_haz", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      pop_haz_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                         std::numeric_limits<double>::quiet_NaN());
      new (&pop_haz)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(pop_haz_data__.data(), N);
      {
        std::vector<local_scalar_t__> pop_haz_flat__;
        current_statement__ = 48;
        pop_haz_flat__ = context__.vals_r("pop_haz");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(pop_haz, pop_haz_flat__[(pos__ - 1)],
            "assigning variable pop_haz", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("X", "P", P);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(P)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), N, P);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 51;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 51;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 51;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 51;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 53;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 53;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 53;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 54;
      stan::math::validate_non_negative_index("delta", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization", "delta", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      delta_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                       std::numeric_limits<double>::quiet_NaN());
      new (&delta)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(delta_data__.data(), N);
      {
        std::vector<local_scalar_t__> delta_flat__;
        current_statement__ = 55;
        delta_flat__ = context__.vals_r("delta");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 55;
          stan::model::assign(delta, delta_flat__[(pos__ - 1)],
            "assigning variable delta", stan::model::index_uni(sym1__));
          current_statement__ = 55;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 56;
      stan::math::validate_non_negative_index("grid", "grid_size", grid_size);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "grid", "double",
        std::vector<size_t>{static_cast<size_t>(grid_size)});
      grid_data__ = Eigen::Matrix<double,-1,1>::Constant(grid_size,
                      std::numeric_limits<double>::quiet_NaN());
      new (&grid) Eigen::Map<Eigen::Matrix<double,-1,1>>(grid_data__.data(),
        grid_size);
      {
        std::vector<local_scalar_t__> grid_flat__;
        current_statement__ = 57;
        grid_flat__ = context__.vals_r("grid");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= grid_size; ++sym1__) {
          current_statement__ = 57;
          stan::model::assign(grid, grid_flat__[(pos__ - 1)],
            "assigning variable grid", stan::model::index_uni(sym1__));
          current_statement__ = 57;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("beta", "P", P);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("lambda", "grid_size",
        grid_size);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("eta", "N", N);
      current_statement__ = 61;
      base_cum_haz_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 61;
      base_cum_haz_1dim__ = (grid_size - 1);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("base_cum_haz",
        "grid_size - 1", base_cum_haz_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = P + grid_size + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_PEHaz";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_PEHaz_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(grid_size,
          DUMMY_VAR__);
      current_statement__ = 2;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 grid_size);
      local_scalar_t__ shape_lambda = DUMMY_VAR__;
      current_statement__ = 3;
      shape_lambda = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      local_scalar_t__ scale_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      scale_lambda = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      local_scalar_t__ loglik = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> base_cum_haz =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(base_cum_haz_1dim__,
          DUMMY_VAR__);
      {
        current_statement__ = 8;
        stan::math::validate_non_negative_index("base_haz", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> base_haz =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 10;
        stan::math::validate_non_negative_index("cum_haz", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> cum_haz =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 12;
        stan::model::assign(eta, stan::math::multiply(X, beta),
          "assigning variable eta");
        current_statement__ = 31;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 13;
          stan::model::assign(base_haz, 0, "assigning variable base_haz",
            stan::model::index_uni(i));
          current_statement__ = 14;
          stan::model::assign(cum_haz, 0, "assigning variable cum_haz",
            stan::model::index_uni(i));
          current_statement__ = 25;
          for (int g = 1; g <= (grid_size - 1); ++g) {
            current_statement__ = 16;
            if (stan::math::logical_lt(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(grid, "grid", stan::model::index_uni(g)))) {}
            current_statement__ = 20;
            if ((stan::math::primitive_value(
                   stan::math::logical_gte(
                     stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                     stan::model::rvalue(grid, "grid",
                       stan::model::index_uni(g))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lt(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    stan::model::rvalue(grid, "grid",
                      stan::model::index_uni((g + 1))))))) {
              current_statement__ = 17;
              stan::model::assign(cum_haz,
                (stan::model::rvalue(cum_haz, "cum_haz",
                   stan::model::index_uni(i)) +
                (stan::model::rvalue(lambda, "lambda",
                   stan::model::index_uni(g)) *
                (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                stan::model::rvalue(grid, "grid", stan::model::index_uni(g))))),
                "assigning variable cum_haz", stan::model::index_uni(i));
              current_statement__ = 18;
              stan::model::assign(base_haz,
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(g)), "assigning variable base_haz",
                stan::model::index_uni(i));
            }
            current_statement__ = 23;
            if (stan::math::logical_gte(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(grid, "grid",
                    stan::model::index_uni((g + 1))))) {
              current_statement__ = 21;
              stan::model::assign(cum_haz,
                (stan::model::rvalue(cum_haz, "cum_haz",
                   stan::model::index_uni(i)) +
                ((stan::model::rvalue(grid, "grid",
                    stan::model::index_uni((g + 1))) -
                stan::model::rvalue(grid, "grid", stan::model::index_uni(g)))
                *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(g)))), "assigning variable cum_haz",
                stan::model::index_uni(i));
            }
          }
          current_statement__ = 29;
          if (stan::math::logical_gte(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::model::rvalue(grid, "grid",
                  stan::model::index_uni(grid_size)))) {
            current_statement__ = 26;
            stan::model::assign(base_haz,
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(grid_size)),
              "assigning variable base_haz", stan::model::index_uni(i));
            current_statement__ = 27;
            stan::model::assign(cum_haz,
              (stan::model::rvalue(cum_haz, "cum_haz",
                 stan::model::index_uni(i)) +
              ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
              stan::model::rvalue(grid, "grid",
                stan::model::index_uni(grid_size))) *
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(grid_size)))),
              "assigning variable cum_haz", stan::model::index_uni(i));
          }
        }
        current_statement__ = 32;
        loglik = 0;
        current_statement__ = 35;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 33;
          loglik = (loglik +
            ((stan::model::rvalue(delta, "delta", stan::model::index_uni(i))
            *
            stan::math::log(
              ((stan::model::rvalue(base_haz, "base_haz",
                  stan::model::index_uni(i)) *
              stan::math::exp(
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i))))
              +
              stan::model::rvalue(pop_haz, "pop_haz",
                stan::model::index_uni(i)))))
            -
            (stan::model::rvalue(cum_haz, "cum_haz",
               stan::model::index_uni(i))
            *
            stan::math::exp(
              stan::model::rvalue(eta, "eta", stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 37;
      stan::model::assign(base_cum_haz,
        ((stan::model::rvalue(grid, "grid", stan::model::index_uni(2)) -
        stan::model::rvalue(grid, "grid", stan::model::index_uni(1))) *
        stan::model::rvalue(lambda, "lambda", stan::model::index_uni(1))),
        "assigning variable base_cum_haz", stan::model::index_uni(1));
      current_statement__ = 40;
      for (int g = 2; g <= (grid_size - 1); ++g) {
        current_statement__ = 38;
        stan::model::assign(base_cum_haz,
          (stan::model::rvalue(base_cum_haz, "base_cum_haz",
             stan::model::index_uni((g - 1))) +
          ((stan::model::rvalue(grid, "grid", stan::model::index_uni((g + 1)))
          - stan::model::rvalue(grid, "grid", stan::model::index_uni(g))) *
          stan::model::rvalue(lambda, "lambda", stan::model::index_uni(g)))),
          "assigning variable base_cum_haz", stan::model::index_uni(g));
      }
      {
        current_statement__ = 41;
        lp_accum__.add(loglik);
        current_statement__ = 42;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda, shape_lambda,
                         scale_lambda));
        current_statement__ = 43;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(beta, 3, 0, 2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_PEHaz_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(grid_size,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 grid_size);
      double shape_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      shape_lambda = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      double scale_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      scale_lambda = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0, lp__);
      double loglik = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> base_cum_haz =
        Eigen::Matrix<double,-1,1>::Constant(base_cum_haz_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta);
      out__.write(lambda);
      out__.write(shape_lambda);
      out__.write(scale_lambda);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        current_statement__ = 8;
        stan::math::validate_non_negative_index("base_haz", "N", N);
        Eigen::Matrix<double,-1,1> base_haz =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 10;
        stan::math::validate_non_negative_index("cum_haz", "N", N);
        Eigen::Matrix<double,-1,1> cum_haz =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 12;
        stan::model::assign(eta, stan::math::multiply(X, beta),
          "assigning variable eta");
        current_statement__ = 31;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 13;
          stan::model::assign(base_haz, 0, "assigning variable base_haz",
            stan::model::index_uni(i));
          current_statement__ = 14;
          stan::model::assign(cum_haz, 0, "assigning variable cum_haz",
            stan::model::index_uni(i));
          current_statement__ = 25;
          for (int g = 1; g <= (grid_size - 1); ++g) {
            current_statement__ = 16;
            if (stan::math::logical_lt(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(grid, "grid", stan::model::index_uni(g)))) {}
            current_statement__ = 20;
            if ((stan::math::primitive_value(
                   stan::math::logical_gte(
                     stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                     stan::model::rvalue(grid, "grid",
                       stan::model::index_uni(g))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lt(
                    stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                    stan::model::rvalue(grid, "grid",
                      stan::model::index_uni((g + 1))))))) {
              current_statement__ = 17;
              stan::model::assign(cum_haz,
                (stan::model::rvalue(cum_haz, "cum_haz",
                   stan::model::index_uni(i)) +
                (stan::model::rvalue(lambda, "lambda",
                   stan::model::index_uni(g)) *
                (stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
                stan::model::rvalue(grid, "grid", stan::model::index_uni(g))))),
                "assigning variable cum_haz", stan::model::index_uni(i));
              current_statement__ = 18;
              stan::model::assign(base_haz,
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(g)), "assigning variable base_haz",
                stan::model::index_uni(i));
            }
            current_statement__ = 23;
            if (stan::math::logical_gte(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(grid, "grid",
                    stan::model::index_uni((g + 1))))) {
              current_statement__ = 21;
              stan::model::assign(cum_haz,
                (stan::model::rvalue(cum_haz, "cum_haz",
                   stan::model::index_uni(i)) +
                ((stan::model::rvalue(grid, "grid",
                    stan::model::index_uni((g + 1))) -
                stan::model::rvalue(grid, "grid", stan::model::index_uni(g)))
                *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(g)))), "assigning variable cum_haz",
                stan::model::index_uni(i));
            }
          }
          current_statement__ = 29;
          if (stan::math::logical_gte(
                stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                stan::model::rvalue(grid, "grid",
                  stan::model::index_uni(grid_size)))) {
            current_statement__ = 26;
            stan::model::assign(base_haz,
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(grid_size)),
              "assigning variable base_haz", stan::model::index_uni(i));
            current_statement__ = 27;
            stan::model::assign(cum_haz,
              (stan::model::rvalue(cum_haz, "cum_haz",
                 stan::model::index_uni(i)) +
              ((stan::model::rvalue(y, "y", stan::model::index_uni(i)) -
              stan::model::rvalue(grid, "grid",
                stan::model::index_uni(grid_size))) *
              stan::model::rvalue(lambda, "lambda",
                stan::model::index_uni(grid_size)))),
              "assigning variable cum_haz", stan::model::index_uni(i));
          }
        }
        current_statement__ = 32;
        loglik = 0;
        current_statement__ = 35;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 33;
          loglik = (loglik +
            ((stan::model::rvalue(delta, "delta", stan::model::index_uni(i))
            *
            stan::math::log(
              ((stan::model::rvalue(base_haz, "base_haz",
                  stan::model::index_uni(i)) *
              stan::math::exp(
                stan::model::rvalue(eta, "eta", stan::model::index_uni(i))))
              +
              stan::model::rvalue(pop_haz, "pop_haz",
                stan::model::index_uni(i)))))
            -
            (stan::model::rvalue(cum_haz, "cum_haz",
               stan::model::index_uni(i))
            *
            stan::math::exp(
              stan::model::rvalue(eta, "eta", stan::model::index_uni(i))))));
        }
      }
      current_statement__ = 37;
      stan::model::assign(base_cum_haz,
        ((stan::model::rvalue(grid, "grid", stan::model::index_uni(2)) -
        stan::model::rvalue(grid, "grid", stan::model::index_uni(1))) *
        stan::model::rvalue(lambda, "lambda", stan::model::index_uni(1))),
        "assigning variable base_cum_haz", stan::model::index_uni(1));
      current_statement__ = 40;
      for (int g = 2; g <= (grid_size - 1); ++g) {
        current_statement__ = 38;
        stan::model::assign(base_cum_haz,
          (stan::model::rvalue(base_cum_haz, "base_cum_haz",
             stan::model::index_uni((g - 1))) +
          ((stan::model::rvalue(grid, "grid", stan::model::index_uni((g + 1)))
          - stan::model::rvalue(grid, "grid", stan::model::index_uni(g))) *
          stan::model::rvalue(lambda, "lambda", stan::model::index_uni(g)))),
          "assigning variable base_cum_haz", stan::model::index_uni(g));
      }
      if (emit_transformed_parameters__) {
        out__.write(loglik);
        out__.write(eta);
        out__.write(base_cum_haz);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P),
        "assigning variable beta");
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(grid_size,
          DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(grid_size),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
      local_scalar_t__ shape_lambda = DUMMY_VAR__;
      current_statement__ = 3;
      shape_lambda = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, shape_lambda);
      local_scalar_t__ scale_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      scale_lambda = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, scale_lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(grid_size)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "shape_lambda",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "scale_lambda",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(grid_size,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 2;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= grid_size; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, lambda);
      local_scalar_t__ shape_lambda = DUMMY_VAR__;
      current_statement__ = 3;
      shape_lambda = context__.vals_r("shape_lambda")[(1 - 1)];
      out__.write_free_lb(0, shape_lambda);
      local_scalar_t__ scale_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      scale_lambda = context__.vals_r("scale_lambda")[(1 - 1)];
      out__.write_free_lb(0, scale_lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta", "lambda", "shape_lambda",
                "scale_lambda"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"loglik", "eta", "base_cum_haz"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(grid_size)},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(base_cum_haz_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= grid_size; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "shape_lambda");
    param_names__.emplace_back(std::string() + "scale_lambda");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= base_cum_haz_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "base_cum_haz" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= grid_size; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "shape_lambda");
    param_names__.emplace_back(std::string() + "scale_lambda");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "loglik");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "eta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= base_cum_haz_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "base_cum_haz" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(grid_size) + "},\"block\":\"parameters\"},{\"name\":\"shape_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"base_cum_haz\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(base_cum_haz_1dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(grid_size) + "},\"block\":\"parameters\"},{\"name\":\"shape_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"scale_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"loglik\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"base_cum_haz\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(base_cum_haz_1dim__) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((P + grid_size) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((1 + N) +
      base_cum_haz_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((P + grid_size) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((1 + N) +
      base_cum_haz_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_PEHaz_namespace::model_PEHaz;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_PEHaz_namespace::profiles__;
}
#endif
#endif
